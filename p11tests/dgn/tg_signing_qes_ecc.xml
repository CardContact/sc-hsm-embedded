<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="doctg.xsl" ?>
<testgroup 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://www.openscdp.org/schema/testframework-1.0.xsd"
	id="tg_signing_qes_ecc" arrayElement="testcase,function" arrayIndex="id,Name">
	<name>QES Signing</name>
	<description>
		<p>Signing data with PKCS#11 using keys on the card.</p>
	</description>
	<reference>
		<p></p>
	</reference>

<!-- Initializing the test group environment -->


	<constructor Param="name, parameter">
		<Script><![CDATA[		
		//Call constructor of super class TestGroup and define name of test group
		TestGroup.call(this, name, parameter);
		]]></Script>
	</constructor>



<!-- Setup method called before each test case is executed -->
	<setup>
		<Script><![CDATA[
			
		]]></Script>
	</setup>



<!-- Teardown method called after each test case is executed -->
	<teardown>
		<Script><![CDATA[
		
	
		]]></Script>
	</teardown>



	<testcase id="101_CKM_ECDSA">
		<name>ECDSA Signature with external digest</name>
		<description>
			<p>Perform an ECDSA signature using an externally provided hash</p>
		</description>
		<requirement>
			<p>Use Case Signing</p>
		</requirement>
		<reference>
			<p></p>
		</reference>
		<Script><![CDATA[
var p = new PKCS11Provider(this.parameter.provider);
try	{
	var slot = getSlot(p, "STARCOS.QES");

	if (slot < 0) {
		throw new Error("No token found");
	}

	print("Using slot: " + slot);
	
	// Open R/O session
	var s = new PKCS11Session(p, slot, false);
	
	// Login with USER PIN
	s.login(this.parameter.pin);
	
	var privateKey = getObjectByLabel(s, PKCS11Object.CKO_PRIVATE_KEY, "C.CH.DS");
	this.assertTrue(privateKey != null, "PKCS#11 provider does not enumerates private key object");

	var certificate = getObjectByLabel(s, PKCS11Object.CKO_CERTIFICATE, "C.CH.DS");
	this.assertTrue(certificate != null, "Could not find a matching certificate for the private key");
	
	var certbin = certificate.getAttribute(PKCS11Object.CKA_VALUE);
	var cert = new X509(certbin);
	print(cert);
	var publicKey = cert.getPublicKey();
		
	var msg = new ByteString("Hello World", ASCII);
	
	var crypto = new Crypto();

	var digest = crypto.digest(Crypto.SHA_1, msg);
	
	// Test with single step C_Sign
	s.signInit(PKCS11Session.CKM_ECDSA, privateKey);
	
	var signature = s.sign(digest);
	print("Signature : " + signature);
	
	signature = ECCUtils.wrapSignature(signature);
	
	var ok = crypto.verify(publicKey, Crypto.ECDSA_SHA1, msg, signature);
	print("Verification " + (ok ? "OK" : "Failed !"));
	
	this.assertTrue(ok, "Signature verification failed !");
	
	s.close();

} finally {
	p.cleanup();
}
		]]></Script>
	</testcase>
</testgroup>
