<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="doctg.xsl" ?>
<testgroup
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="http://www.openscdp.org/schema/testframework-1.0.xsd"
	id="tg_certificate" arrayElement="testcase,function" arrayIndex="id,Name">
	<name>Store certificate</name>
	<description>
		<p>Store certificates.</p>
	</description>
	<reference>
		<p></p>
	</reference>

<!-- Initializing the test group environment -->


	<constructor Param="name, parameter">
		<Script><![CDATA[
		//Call constructor of super class TestGroup and define name of test group
		TestGroup.call(this, name, parameter);
		]]></Script>
	</constructor>



<!-- Setup method called before each test case is executed -->
	<setup>
		<Script><![CDATA[

		]]></Script>
	</setup>



<!-- Teardown method called after each test case is executed -->
	<teardown>
		<Script><![CDATA[


		]]></Script>
	</teardown>



	<testcase id="001_Store_Certificate_for_RSA1024_Key">
		<name>Generate RSA key and store matching certificate</name>
		<description>
			<p></p>
		</description>
		<requirement>
			<p></p>
		</requirement>
		<reference>
			<p></p>
		</reference>
		<Script><![CDATA[
var p = new PKCS11Provider(this.parameter.provider);
try	{
	var slot = getSlot(p);

	log("Using slot: " + slot);

	// Open R/W session
	var s = new PKCS11Session(p, slot, true);

	log("Login");
	// Login with USER PIN
	s.login(this.parameter.pin);

	issueCertificate(this.parameter.ca, s, "Joe Doe (RSA1024)", 1024, "EmailAndTLSClient");

	s.close();
} finally {
	p.cleanup();
}
		]]></Script>
	</testcase>



	<testcase id="002_Store_Certificate_for_RSA1536_Key">
		<name>Generate RSA key and store matching certificate</name>
		<description>
			<p></p>
		</description>
		<requirement>
			<p></p>
		</requirement>
		<reference>
			<p></p>
		</reference>
		<Script><![CDATA[
var p = new PKCS11Provider(this.parameter.provider);
try	{
	var slot = getSlot(p);

	log("Using slot: " + slot);

	// Open R/W session
	var s = new PKCS11Session(p, slot, true);

	log("Login");
	// Login with USER PIN
	s.login(this.parameter.pin);

	issueCertificate(this.parameter.ca, s, "Joe Doe (RSA1536)", 1536, "EmailAndTLSClient");

	s.close();
} finally {
	p.cleanup();
}
		]]></Script>
	</testcase>



	<testcase id="003_Store_Certificate_for_RSA2048_Key">
		<name>Generate RSA key and store matching certificate</name>
		<description>
			<p></p>
		</description>
		<requirement>
			<p></p>
		</requirement>
		<reference>
			<p></p>
		</reference>
		<Script><![CDATA[
var p = new PKCS11Provider(this.parameter.provider);
try	{
	var slot = getSlot(p);

	log("Using slot: " + slot);

	// Open R/W session
	var s = new PKCS11Session(p, slot, true);

	log("Login");
	// Login with USER PIN
	s.login(this.parameter.pin);

	issueCertificate(this.parameter.ca, s, "Joe Doe (RSA2048)", 2048, "EmailAndTLSClient");

	s.close();
} finally {
	p.cleanup();
}
		]]></Script>
	</testcase>



	<testcase id="004_Store_Certificate_for_RSA3072_Key">
		<name>Generate RSA key and store matching certificate</name>
		<description>
			<p></p>
		</description>
		<requirement>
			<p></p>
		</requirement>
		<reference>
			<p></p>
		</reference>
		<Script><![CDATA[
var p = new PKCS11Provider(this.parameter.provider);
try	{
	var slot = getSlot(p);

	log("Using slot: " + slot);

	// Open R/W session
	var s = new PKCS11Session(p, slot, true);

	log("Login");
	// Login with USER PIN
	s.login(this.parameter.pin);

	issueCertificate(this.parameter.ca, s, "Joe Doe (RSA3072)", 3072, "EmailAndTLSClient");

	s.close();
} finally {
	p.cleanup();
}
		]]></Script>
	</testcase>



	<testcase id="005_Store_Certificate_for_RSA4096_Key">
		<name>Generate RSA key and store matching certificate</name>
		<description>
			<p></p>
		</description>
		<requirement>
			<p></p>
		</requirement>
		<reference>
			<p></p>
		</reference>
		<Script><![CDATA[
var p = new PKCS11Provider(this.parameter.provider);
try	{
	var slot = getSlot(p);

	log("Using slot: " + slot);

	// Open R/W session
	var s = new PKCS11Session(p, slot, true);

	log("Login");
	// Login with USER PIN
	s.login(this.parameter.pin);

	issueCertificate(this.parameter.ca, s, "Joe Doe (RSA4096)", 4096, "EmailAndTLSClient");

	s.close();
} finally {
	p.cleanup();
}
		]]></Script>
	</testcase>



	<testcase id="101_Store_Certificate_for_ECC192_Key">
		<name>Generate ECC key and store matching certificate</name>
		<description>
			<p></p>
		</description>
		<requirement>
			<p></p>
		</requirement>
		<reference>
			<p></p>
		</reference>
		<Script><![CDATA[
var p = new PKCS11Provider(this.parameter.provider);
try	{
	var slot = getSlot(p);

	log("Using slot: " + slot);

	// Open R/W session
	var s = new PKCS11Session(p, slot, true);

	log("Login");
	// Login with USER PIN
	s.login(this.parameter.pin);

	issueCertificate(this.parameter.ca, s, "Joe Doe (ECC-SECP192)", "secp192r1", "TLSClient");

	s.close();
} finally {
	p.cleanup();
}
		]]></Script>
	</testcase>



	<testcase id="102_Store_Certificate_for_ECC224_Key">
		<name>Generate ECC key and store matching certificate</name>
		<description>
			<p></p>
		</description>
		<requirement>
			<p></p>
		</requirement>
		<reference>
			<p></p>
		</reference>
		<Script><![CDATA[
var p = new PKCS11Provider(this.parameter.provider);
try	{
	var slot = getSlot(p);

	log("Using slot: " + slot);

	// Open R/W session
	var s = new PKCS11Session(p, slot, true);

	log("Login");
	// Login with USER PIN
	s.login(this.parameter.pin);

	issueCertificate(this.parameter.ca, s, "Joe Doe (ECC-BP224)", "brainpoolP224r1", "TLSClient");

	s.close();
} finally {
	p.cleanup();
}
		]]></Script>
	</testcase>



	<testcase id="103_Store_Certificate_for_ECC256_Key">
		<name>Generate ECC key and store matching certificate</name>
		<description>
			<p></p>
		</description>
		<requirement>
			<p></p>
		</requirement>
		<reference>
			<p></p>
		</reference>
		<Script><![CDATA[
var p = new PKCS11Provider(this.parameter.provider);
try	{
	var slot = getSlot(p);

	log("Using slot: " + slot);

	// Open R/W session
	var s = new PKCS11Session(p, slot, true);

	log("Login");
	// Login with USER PIN
	s.login(this.parameter.pin);

	issueCertificate(this.parameter.ca, s, "Joe Doe (ECC-SECP256)", "secp256r1", "TLSClient");

	s.close();
} finally {
	p.cleanup();
}
		]]></Script>
	</testcase>



	<testcase id="104_Store_Certificate_for_ECC320_Key">
		<name>Generate ECC key and store matching certificate</name>
		<description>
			<p></p>
		</description>
		<requirement>
			<p></p>
		</requirement>
		<reference>
			<p></p>
		</reference>
		<Script><![CDATA[
var p = new PKCS11Provider(this.parameter.provider);
try	{
	var slot = getSlot(p);

	log("Using slot: " + slot);

	// Open R/W session
	var s = new PKCS11Session(p, slot, true);

	log("Login");
	// Login with USER PIN
	s.login(this.parameter.pin);

	issueCertificate(this.parameter.ca, s, "Joe Doe (ECC-BP320)", "brainpoolP320r1", "TLSClient");

	s.close();
} finally {
	p.cleanup();
}
		]]></Script>
	</testcase>



	<testcase id="105_Store_Certificate_for_ECC384_Key">
		<name>Generate ECC key and store matching certificate</name>
		<description>
			<p></p>
		</description>
		<requirement>
			<p></p>
		</requirement>
		<reference>
			<p></p>
		</reference>
		<Script><![CDATA[
var p = new PKCS11Provider(this.parameter.provider);
try	{
	var slot = getSlot(p);

	log("Using slot: " + slot);

	// Open R/W session
	var s = new PKCS11Session(p, slot, true);

	log("Login");
	// Login with USER PIN
	s.login(this.parameter.pin);

	issueCertificate(this.parameter.ca, s, "Joe Doe (ECC-BP384)", "brainpoolP384r1", "TLSClient");

	s.close();
} finally {
	p.cleanup();
}
		]]></Script>
	</testcase>



	<testcase id="106_Store_Certificate_for_ECC512_Key">
		<name>Generate ECC key and store matching certificate</name>
		<description>
			<p></p>
		</description>
		<requirement>
			<p></p>
		</requirement>
		<reference>
			<p></p>
		</reference>
		<Script><![CDATA[
var p = new PKCS11Provider(this.parameter.provider);
try	{
	var slot = getSlot(p);

	log("Using slot: " + slot);

	// Open R/W session
	var s = new PKCS11Session(p, slot, true);

	log("Login");
	// Login with USER PIN
	s.login(this.parameter.pin);

	issueCertificate(this.parameter.ca, s, "Joe Doe (ECC-BP512)", "brainpoolP512r1", "TLSClient");

	s.close();
} finally {
	p.cleanup();
}
		]]></Script>
	</testcase>



	<testcase id="107_Store_Certificate_for_ECC521_Key">
		<name>Generate ECC key and store matching certificate</name>
		<description>
			<p></p>
		</description>
		<requirement>
			<p></p>
		</requirement>
		<reference>
			<p></p>
		</reference>
		<Script><![CDATA[
var p = new PKCS11Provider(this.parameter.provider);
try	{
	var slot = getSlot(p);

	log("Using slot: " + slot);

	// Open R/W session
	var s = new PKCS11Session(p, slot, true);

	log("Login");
	// Login with USER PIN
	s.login(this.parameter.pin);

	issueCertificate(this.parameter.ca, s, "Joe Doe (ECC-SECP521)", "secp521r1", "TLSClient");

	s.close();
} finally {
	p.cleanup();
}
		]]></Script>
	</testcase>



	<testcase id="201_Store_CA_Certificate">
		<name>Store CA certificate</name>
		<description>
			<p></p>
		</description>
		<requirement>
			<p></p>
		</requirement>
		<reference>
			<p></p>
		</reference>
		<Script><![CDATA[
var p = new PKCS11Provider(this.parameter.provider);
try	{
	var slot = getSlot(p);

	log("Using slot: " + slot);

	// Open R/W session
	var s = new PKCS11Session(p, slot, true);

	log("Login");
	// Login with USER PIN
	s.login(this.parameter.pin);

	var cert = this.parameter.ca.getSignerCertificate();

	storeCertificate(s, "OpenSCDP Demo CA", cert);

	s.close();
} finally {
	p.cleanup();
}
		]]></Script>
	</testcase>

</testgroup>
